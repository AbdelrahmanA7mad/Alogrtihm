@using Alogrtihm.ViewModel
@model ProductViewModel
@{
    ViewData["Title"] = "Filteration System";
    var filterViewModel = ViewBag.FilterViewModel as FilterViewModel;
}

<!-- Loading Overlay -->
<div id="loadingOverlay" class="loading-overlay">
    <div class="loading-content">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <div class="mt-3" id="loadingText">Loading products...</div>
    </div>
</div>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Filteration System</h1>
        <a href="@Url.Action("Algorithms", "Product")" class="btn btn-outline-primary">
            <i class="bi bi-info-circle me-2"></i>View Used Algorithms
        </a>
    </div>

    <div class="row">
        <!-- Filter Sidebar -->
        <div class="col-md-3 mb-4">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Filter Products</h5>
                </div>
                <div class="card-body">
                    <form method="get" id="filterForm" action="@Url.Action("Index", "Product")">
                        <div class="mb-3">
                            <label for="category" class="form-label">Category</label>
                            <select class="form-select" name="category" id="category">
                                <option value="">All Categories</option>
                                @foreach (var category in filterViewModel.Categories)
                                {
                                    <option value="@category" selected="@(category == filterViewModel.CurrentCategory)">@category</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <label for="brand" class="form-label">Brand</label>
                            <select class="form-select" name="brand" id="brand">
                                <option value="">All Brands</option>
                                @foreach (var brand in filterViewModel.Brands)
                                {
                                    <option value="@brand" selected="@(brand == filterViewModel.CurrentBrand)">@brand</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Price Range</label>
                            <div class="d-flex justify-content-between">
                                <span id="priceRangeMin">$@Model.PriceRange.CurrentMin</span>
                                <span id="priceRangeMax">$@Model.PriceRange.CurrentMax</span>
                            </div>
                            <div id="priceRangeSlider" class="mt-2"></div>
                            <input type="hidden" id="minPrice" name="minPrice" value="@filterViewModel.CurrentMinPrice">
                            <input type="hidden" id="maxPrice" name="maxPrice" value="@filterViewModel.CurrentMaxPrice">
                        </div>

                        <div class="mb-3">
                            <label for="minRating" class="form-label">Min Rating</label>
                            <div class="d-flex align-items-center">
                                <input type="range" class="form-range me-2" id="ratingRange" min="0" max="5" step="0.1"
                                       value="@(filterViewModel.CurrentMinRating ?? 0)">
                                <span id="ratingValue">@(filterViewModel.CurrentMinRating ?? 0)</span>
                                <input type="hidden" name="minRating" id="minRating" value="@filterViewModel.CurrentMinRating">
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Features</label>
                            <div class="features-container">
                                @foreach (var feature in filterViewModel.AllFeatures)
                                {
                                    bool isChecked = !string.IsNullOrEmpty(filterViewModel.CurrentFeatures) &&
                                    filterViewModel.CurrentFeatures.Split(',').Contains(feature);
                                    <div class="form-check">
                                        <input class="form-check-input feature-checkbox" type="checkbox"
                                               value="@feature" id="feature_@feature.Replace(" ", "_")" @(isChecked ? "checked=\"checked\"" : "")>
                                        <label class="form-check-label" for="feature_@feature.Replace(" ", "_")">
                                            @feature
                                        </label>
                                    </div>
                                }
                            </div>
                            <input type="hidden" name="features" id="featuresInput" value="@filterViewModel.CurrentFeatures">
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Availability</label>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="true" id="inStock" name="inStock"
                                @(filterViewModel.CurrentInStock == true ? "checked=\"checked\"" : "")>
                                <label class="form-check-label" for="inStock">
                                    In Stock Only
                                </label>
                            </div>
                        </div>

                        <button type="submit" class="btn btn-primary w-100">Apply Filters</button>
                        <button type="button" id="resetFilters" class="btn btn-outline-secondary w-100 mt-2">Reset Filters</button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Product List -->
        <div class="col-md-9">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div>
                    <span class="text-muted">Showing @Model.Products.Count of @Model.TotalProducts products</span>
                </div>
                <div class="d-flex align-items-center">
                    <label class="me-2">Sort By:</label>
                    <select class="form-select form-select-sm me-2" id="sortBy" name="sortBy">
                        @{
                            var currentSortBy = filterViewModel.CurrentSortBy as string;
                        }
                        <option value="name" selected="@(currentSortBy == "name" ? "selected" : null)">Name</option>
                        <option value="price" selected="@(currentSortBy == "price" ? "selected" : null)">Price</option>
                        <option value="rating" selected="@(currentSortBy == "rating" ? "selected" : null)">Rating</option>
                    </select>

                    <select class="form-select form-select-sm me-2" id="sortDirection" name="sortDirection">
                        @{
                            var currentSortDirection = filterViewModel.CurrentSortDirection as string;
                        }
                        <option value="asc" selected="@(currentSortDirection == "asc" ? "selected" : null)">Ascending</option>
                        <option value="desc" selected="@(currentSortDirection == "desc" ? "selected" : null)">Descending</option>
                    </select>

                    <select class="form-select form-select-sm sort-algorithm-select" id="sortAlgorithm" name="sortAlgorithm">
                        @{
                            var currentAlgorithm = filterViewModel.CurrentSortAlgorithm as string ?? "quick";
                        }
                        <option value="quick" selected="@(currentAlgorithm == "quick" ? "selected" : null)">
                            Quick Sort (O(n log n) avg)
                        </option>
                        <option value="merge" selected="@(currentAlgorithm == "merge" ? "selected" : null)">
                            Merge Sort (O(n log n))
                        </option>
                        <option value="bubble" selected="@(currentAlgorithm == "bubble" ? "selected" : null)">
                            Bubble Sort (O(n²))
                        </option>
                        <option value="insertion" selected="@(currentAlgorithm == "insertion" ? "selected" : null)">
                            Insertion Sort (O(n²))
                        </option>
                        <option value="selection" selected="@(currentAlgorithm == "selection" ? "selected" : null)">
                            Selection Sort (O(n²))
                        </option>
                        <option value="heap" selected="@(currentAlgorithm == "heap" ? "selected" : null)">
                            Heap Sort (O(n log n))
                        </option>
                        <option value="shell" selected="@(currentAlgorithm == "shell" ? "selected" : null)">
                            Shell Sort (O(n log² n))
                        </option>
                    </select>
                </div>
            </div>

            <div class="row row-cols-1 row-cols-md-2 g-4 product-grid">
                @foreach (var product in Model.Products)
                {
                    <div class="col">
                        <div class="card h-100 product-card" data-product-id="@product.Id">
                            <div class="position-relative">
                                @if (!product.InStock)
                                {
                                    <div class="out-of-stock-badge">Out of Stock</div>
                                }
                            </div>
                            <div class="card-body">
                                <h5 class="card-title">@product.Name</h5>
                                <h6 class="card-subtitle mb-2 text-muted">@product.Brand</h6>

                                <div class="d-flex justify-content-between align-items-center mt-2">
                                    <span class="price">$@product.Price</span>
                                    <div class="rating">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            if (i <= Math.Floor(product.Rating))
                                            {
                                                <i class="bi bi-star-fill text-warning"></i>
                                            }
                                            else if (i - product.Rating > 0 && i - product.Rating < 1)
                                            {
                                                <i class="bi bi-star-half text-warning"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-star text-warning"></i>
                                            }
                                        }
                                        <span class="ms-1">(@product.Rating)</span>
                                    </div>
                                </div>

                                <div class="features mt-2">
                                    @foreach (var feature in product.Features)
                                    {
                                        <span class="badge bg-secondary me-1">@feature</span>
                                    }
                                </div>
                            </div>
                            <div class="card-footer">
                                <div class="d-flex justify-content-between">
                                    <button class="btn btn-sm btn-outline-primary quick-view" data-product-id="@product.Id">
                                        Quick View
                                    </button>
                                    <button class="btn btn-sm @(product.InStock ? "btn-primary" : "btn-secondary disabled") add-to-cart"
                                            data-product-id="@product.Id">
                                        @(product.InStock ? "Add to Cart" : "Out of Stock")
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Sorting Visualization Panel -->
            <div class="card mt-4 mb-4" id="sortingVisualization" style="display: none;">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-bar-chart-fill me-2"></i>
                        Sorting Algorithm Visualization
                    </h5>
                    <button class="btn btn-light btn-sm" id="toggleVisualization">
                        <i class="bi bi-eye"></i> Toggle Visualization
                    </button>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="visualization-container">
                                <div class="algorithm-steps" id="algorithmSteps"></div>
                                <div class="comparison-chart" id="comparisonChart"></div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="algorithm-stats">
                                <h6 class="border-bottom pb-2 mb-3">
                                    <i class="bi bi-info-circle me-2"></i>
                                    Algorithm Statistics
                                </h6>
                                <div class="stat-item">
                                    <label>Current Algorithm:</label>
                                    <span id="currentAlgorithm" class="badge bg-primary">Quick Sort</span>
                                </div>
                                <div class="stat-item">
                                    <label>Comparisons:</label>
                                    <span id="comparisonCount" class="badge bg-info">0</span>
                                </div>
                                <div class="stat-item">
                                    <label>Swaps:</label>
                                    <span id="swapCount" class="badge bg-warning">0</span>
                                </div>
                                <div class="stat-item">
                                    <label>Time:</label>
                                    <span id="sortTime" class="badge bg-success">0ms</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @if (Model.Products.Count == 0)
            {
                <div class="alert alert-info mt-3">
                    No products found matching your criteria. Please try different filters.
                </div>
            }

            <!-- Pagination -->
            @if (filterViewModel.TotalPages > 1)
            {
                <nav aria-label="Product pagination" class="mt-4">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(filterViewModel.CurrentPage == 1 ? "disabled" : "")">
                            <a class="page-link" href="javascript:void(0);" onclick="changePage(@(filterViewModel.CurrentPage - 1))">Previous</a>
                        </li>

                        @if (filterViewModel.TotalPages <= 7)
                        {
                            // Show all pages if not too many
                            for (int i = 1; i <= filterViewModel.TotalPages; i++)
                            {
                                <li class="page-item @(filterViewModel.CurrentPage == i ? "active" : "")">
                                    <a class="page-link" href="javascript:void(0);" onclick="changePage(@i)">@i</a>
                                </li>
                            }
                        }
                        else
                        {
                            // Always show first page
                            <li class="page-item @(filterViewModel.CurrentPage == 1 ? "active" : "")">
                                <a class="page-link" href="javascript:void(0);" onclick="changePage(1)">1</a>
                            </li>

                            // Show ellipsis if needed
                            if (filterViewModel.CurrentPage > 4)
                            {
                                <li class="page-item disabled"><span class="page-link">...</span></li>
                            }

                            // Show current ±2 pages
                            for (int i = Math.Max(2, filterViewModel.CurrentPage - 2); i <= Math.Min(filterViewModel.TotalPages - 1, filterViewModel.CurrentPage + 2); i++)
                            {
                                <li class="page-item @(filterViewModel.CurrentPage == i ? "active" : "")">
                                    <a class="page-link" href="javascript:void(0);" onclick="changePage(@i)">@i</a>
                                </li>
                            }

                            // Show ellipsis before last page if needed
                            if (filterViewModel.CurrentPage < filterViewModel.TotalPages - 3)
                            {
                                <li class="page-item disabled"><span class="page-link">...</span></li>
                            }

                            // Always show last page
                            <li class="page-item @(filterViewModel.CurrentPage == filterViewModel.TotalPages ? "active" : "")">
                                <a class="page-link" href="javascript:void(0);" onclick="changePage(@filterViewModel.TotalPages)">@filterViewModel.TotalPages</a>
                            </li>
                        }

                        <li class="page-item @(filterViewModel.CurrentPage == filterViewModel.TotalPages ? "disabled" : "")">
                            <a class="page-link" href="javascript:void(0);" onclick="changePage(@(filterViewModel.CurrentPage + 1))">Next</a>
                        </li>
                    </ul>
                </nav>
            }
        </div>
    </div>
</div>

<!-- Product Quick View Modal -->
<div class="modal fade" id="productQuickViewModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="quickViewProductName"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12">
                        <h4 id="quickViewProductBrand" class="text-muted mb-3"></h4>
                        <div id="quickViewProductRating" class="mb-3"></div>
                        <h3 id="quickViewProductPrice" class="text-primary mb-3"></h3>
                        <div id="quickViewProductAvailability" class="mb-3"></div>
                        <div class="mb-3">
                            <h5>Features:</h5>
                            <div id="quickViewProductFeatures" class="d-flex flex-wrap gap-2"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="quickViewAddToCart">Add to Cart</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.8.1/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nouislider@14.6.3/distribute/nouislider.min.css">
    <link href="~/css/site.css" rel="stylesheet" />
}

@section Scripts {
    <script>
        // Initialize variables needed by site.js
        window.currentMinPrice = @(filterViewModel.CurrentMinPrice ?? Model.PriceRange.Min);
        window.currentMaxPrice = @(filterViewModel.CurrentMaxPrice ?? Model.PriceRange.Max);
        window.minPrice = @Model.PriceRange.Min;
        window.maxPrice = @Model.PriceRange.Max;
        window.resetFiltersUrl = '@Url.Action("Index", "Product")';
        window.getProductDetailsUrl = '@Url.Action("GetProductDetails", "Product")';

        // Show loading overlay
        function showLoading(message = 'Loading...') {
            document.getElementById('loadingText').textContent = message;
            document.getElementById('loadingOverlay').classList.add('show');
        }

        // Hide loading overlay
        function hideLoading() {
            document.getElementById('loadingOverlay').classList.remove('show');
        }

        // Handle form submission
        const filterForm = document.getElementById('filterForm');
        if (filterForm) {
            filterForm.addEventListener('submit', function (e) {
                e.preventDefault();
                showLoading('Applying filters...');
                this.submit();
            });
        }

        // Handle sort changes
        const sortControls = document.querySelectorAll('#sortBy, #sortDirection, #sortAlgorithm');
        sortControls.forEach(control => {
            control.addEventListener('change', function () {
                showLoading('Updating sort...');
            });
        });

        // Handle pagination
        document.querySelectorAll('.pagination .page-link').forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();
                showLoading('Loading page...');
                const page = this.getAttribute('onclick').match(/\d+/)[0];
                window.changePage(page);
            });
        });

        // Handle reset filters
        const resetButton = document.getElementById('resetFilters');
        if (resetButton) {
            resetButton.addEventListener('click', function () {
                showLoading('Resetting filters...');
            });
        }

        // Handle price range changes
        const priceSlider = document.getElementById('priceRangeSlider');
        if (priceSlider && priceSlider.noUiSlider) {
            priceSlider.noUiSlider.on('change', function () {
                showLoading('Updating price range...');
            });
        }

        // Handle rating range changes
        const ratingRange = document.getElementById('ratingRange');
        if (ratingRange) {
            ratingRange.addEventListener('change', function () {
                showLoading('Updating rating filter...');
            });
        }

        // Handle feature checkbox changes
        const featureCheckboxes = document.querySelectorAll('.feature-checkbox');
        featureCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function () {
            });
        });

        // Handle in-stock checkbox changes
        const inStockCheckbox = document.getElementById('inStock');
        if (inStockCheckbox) {
            inStockCheckbox.addEventListener('change', function () {
            });
        }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/nouislider@14.6.3/distribute/nouislider.min.js"></script>
    <script src="~/js/site.js"></script>

    <script>
        // Initialize visualization panel
        document.addEventListener('DOMContentLoaded', function () {
            const visualizationPanel = document.getElementById('sortingVisualization');
            const toggleButton = document.getElementById('toggleVisualization');
            const algorithmSteps = document.getElementById('algorithmSteps');
            const currentAlgorithm = document.getElementById('currentAlgorithm');
            const comparisonCount = document.getElementById('comparisonCount');
            const swapCount = document.getElementById('swapCount');
            const sortTime = document.getElementById('sortTime');
            let isVisualizationVisible = false;

            // Toggle visualization panel
            if (toggleButton) {
                toggleButton.addEventListener('click', function () {
                    isVisualizationVisible = !isVisualizationVisible;
                    visualizationPanel.style.display = isVisualizationVisible ? 'block' : 'none';
                    this.querySelector('i').className = isVisualizationVisible ? 'bi bi-eye-slash' : 'bi bi-eye';

                    if (isVisualizationVisible) {
                        const currentAlgorithm = document.getElementById('sortAlgorithm').value;
                        updateVisualization(currentAlgorithm);
                    }
                });
            }

            // Update visualization when sort algorithm changes
            const sortAlgorithmSelect = document.getElementById('sortAlgorithm');
            if (sortAlgorithmSelect) {
                sortAlgorithmSelect.addEventListener('change', function () {
                    if (isVisualizationVisible) {
                        updateVisualization(this.value);
                    }
                });
            }

            // Initialize visualization as hidden
            if (visualizationPanel) {
                visualizationPanel.style.display = 'none';
            }
        });

        // Sorting Visualization
        function updateVisualization(algorithm) {
            const startTime = performance.now();
            let comparisons = 0;
            let swaps = 0;

            // Clear previous steps
            algorithmSteps.innerHTML = '';
            currentAlgorithm.textContent = getAlgorithmName(algorithm);

            // Get all product cards
            const productCards = Array.from(document.querySelectorAll('.product-card'));

            // Simulate sorting steps based on algorithm
            switch (algorithm) {
                case 'quick':
                    simulateQuickSort(productCards, 0, productCards.length - 1);
                    break;
                case 'merge':
                    simulateMergeSort(productCards);
                    break;
                case 'bubble':
                    simulateBubbleSort(productCards);
                    break;
                case 'insertion':
                    simulateInsertionSort(productCards);
                    break;
                case 'selection':
                    simulateSelectionSort(productCards);
                    break;
                case 'heap':
                    simulateHeapSort(productCards);
                    break;
                case 'shell':
                    simulateShellSort(productCards);
                    break;
            }

            // Update stats
            const endTime = performance.now();
            sortTime.textContent = `${Math.round(endTime - startTime)}ms`;
            comparisonCount.textContent = comparisons;
            swapCount.textContent = swaps;
        }

        function getAlgorithmName(algorithm) {
            const names = {
                'quick': 'Quick Sort',
                'merge': 'Merge Sort',
                'bubble': 'Bubble Sort',
                'insertion': 'Insertion Sort',
                'selection': 'Selection Sort',
                'heap': 'Heap Sort',
                'shell': 'Shell Sort'
            };
            return names[algorithm] || algorithm;
        }

        function addStep(description) {
            const step = document.createElement('div');
            step.className = 'step-item';
            step.textContent = description;
            algorithmSteps.appendChild(step);
            algorithmSteps.scrollTop = algorithmSteps.scrollHeight;
        }

        function highlightCards(cards, duration = 500) {
            cards.forEach(card => {
                card.classList.add('sorting-active');
                setTimeout(() => card.classList.remove('sorting-active'), duration);
            });
        }

        // Algorithm simulation functions
        function simulateQuickSort(cards, low, high) {
            if (low < high) {
                const pivot = cards[high];
                let i = low - 1;

                for (let j = low; j < high; j++) {
                    comparisons++;
                    if (parseFloat(cards[j].querySelector('.price').textContent.replace('$', '')) <
                        parseFloat(pivot.querySelector('.price').textContent.replace('$', ''))) {
                        i++;
                        swaps++;
                        highlightCards([cards[i], cards[j]]);
                        addStep(`Comparing and swapping elements at positions ${i} and ${j}`);
                        [cards[i], cards[j]] = [cards[j], cards[i]];
                    }
                }
                swaps++;
                highlightCards([cards[i + 1], cards[high]]);
                addStep(`Placing pivot at position ${i + 1}`);
                [cards[i + 1], cards[high]] = [cards[high], cards[i + 1]];

                simulateQuickSort(cards, low, i);
                simulateQuickSort(cards, i + 2, high);
            }
        }

        function simulateBubbleSort(cards) {
            for (let i = 0; i < cards.length - 1; i++) {
                for (let j = 0; j < cards.length - i - 1; j++) {
                    comparisons++;
                    if (parseFloat(cards[j].querySelector('.price').textContent.replace('$', '')) >
                        parseFloat(cards[j + 1].querySelector('.price').textContent.replace('$', ''))) {
                        swaps++;
                        highlightCards([cards[j], cards[j + 1]]);
                        addStep(`Swapping elements at positions ${j} and ${j + 1}`);
                        [cards[j], cards[j + 1]] = [cards[j + 1], cards[j]];
                    }
                }
            }
        }

        function simulateMergeSort(cards) {
            if (cards.length <= 1) return cards;

            const mid = Math.floor(cards.length / 2);
            const left = cards.slice(0, mid);
            const right = cards.slice(mid);

            addStep(`Dividing array into two halves: [0-${mid - 1}] and [${mid}-${cards.length - 1}]`);
            highlightCards(left.concat(right));

            const sortedLeft = simulateMergeSort(left);
            const sortedRight = simulateMergeSort(right);

            return merge(sortedLeft, sortedRight);
        }

        function merge(left, right) {
            const result = [];
            let i = 0, j = 0;

            while (i < left.length && j < right.length) {
                comparisons++;
                const leftPrice = parseFloat(left[i].querySelector('.price').textContent.replace('$', ''));
                const rightPrice = parseFloat(right[j].querySelector('.price').textContent.replace('$', ''));

                if (leftPrice <= rightPrice) {
                    result.push(left[i]);
                    i++;
                } else {
                    result.push(right[j]);
                    j++;
                }
                swaps++;
                highlightCards([left[i - 1], right[j - 1]]);
                addStep(`Merging elements from left[${i - 1}] and right[${j - 1}]`);
            }

            return result.concat(left.slice(i)).concat(right.slice(j));
        }

        function simulateInsertionSort(cards) {
            for (let i = 1; i < cards.length; i++) {
                const current = cards[i];
                const currentPrice = parseFloat(current.querySelector('.price').textContent.replace('$', ''));
                let j = i - 1;

                while (j >= 0) {
                    comparisons++;
                    const jPrice = parseFloat(cards[j].querySelector('.price').textContent.replace('$', ''));
                    if (jPrice > currentPrice) {
                        swaps++;
                        highlightCards([cards[j], cards[j + 1]]);
                        addStep(`Moving element from position ${j} to ${j + 1}`);
                        cards[j + 1] = cards[j];
                        j--;
                    } else {
                        break;
                    }
                }
                cards[j + 1] = current;
            }
        }

        function simulateSelectionSort(cards) {
            for (let i = 0; i < cards.length - 1; i++) {
                let minIdx = i;
                for (let j = i + 1; j < cards.length; j++) {
                    comparisons++;
                    const jPrice = parseFloat(cards[j].querySelector('.price').textContent.replace('$', ''));
                    const minPrice = parseFloat(cards[minIdx].querySelector('.price').textContent.replace('$', ''));
                    if (jPrice < minPrice) {
                        minIdx = j;
                    }
                }
                if (minIdx !== i) {
                    swaps++;
                    highlightCards([cards[i], cards[minIdx]]);
                    addStep(`Swapping elements at positions ${i} and ${minIdx}`);
                    [cards[i], cards[minIdx]] = [cards[minIdx], cards[i]];
                }
            }
        }

        function simulateHeapSort(cards) {
            // Build max heap
            for (let i = Math.floor(cards.length / 2) - 1; i >= 0; i--) {
                heapify(cards, cards.length, i);
            }

            // Extract elements from heap one by one
            for (let i = cards.length - 1; i > 0; i--) {
                swaps++;
                highlightCards([cards[0], cards[i]]);
                addStep(`Moving root to position ${i}`);
                [cards[0], cards[i]] = [cards[i], cards[0]];

                heapify(cards, i, 0);
            }
        }

        function heapify(cards, n, i) {
            let largest = i;
            const left = 2 * i + 1;
            const right = 2 * i + 2;

            if (left < n) {
                comparisons++;
                const leftPrice = parseFloat(cards[left].querySelector('.price').textContent.replace('$', ''));
                const largestPrice = parseFloat(cards[largest].querySelector('.price').textContent.replace('$', ''));
                if (leftPrice > largestPrice) {
                    largest = left;
                }
            }

            if (right < n) {
                comparisons++;
                const rightPrice = parseFloat(cards[right].querySelector('.price').textContent.replace('$', ''));
                const largestPrice = parseFloat(cards[largest].querySelector('.price').textContent.replace('$', ''));
                if (rightPrice > largestPrice) {
                    largest = right;
                }
            }

            if (largest !== i) {
                swaps++;
                highlightCards([cards[i], cards[largest]]);
                addStep(`Swapping elements at positions ${i} and ${largest}`);
                [cards[i], cards[largest]] = [cards[largest], cards[i]];

                heapify(cards, n, largest);
            }
        }

        function simulateShellSort(cards) {
            const n = cards.length;
            for (let gap = Math.floor(n / 2); gap > 0; gap = Math.floor(gap / 2)) {
                addStep(`Using gap size: ${gap}`);
                for (let i = gap; i < n; i++) {
                    const temp = cards[i];
                    const tempPrice = parseFloat(temp.querySelector('.price').textContent.replace('$', ''));
                    let j;

                    for (j = i; j >= gap; j -= gap) {
                        comparisons++;
                        const jGapPrice = parseFloat(cards[j - gap].querySelector('.price').textContent.replace('$', ''));
                        if (jGapPrice > tempPrice) {
                            swaps++;
                            highlightCards([cards[j], cards[j - gap]]);
                            addStep(`Moving element from position ${j - gap} to ${j}`);
                            cards[j] = cards[j - gap];
                        } else {
                            break;
                        }
                    }
                    cards[j] = temp;
                }
            }
        }
    </script>
}